# A 3-node example for ad-hoc simulation with DSDV

# Define options
set val(chan) 	Channel/WirelessChannel ;# channel type
set val(prop) 	Propagation/TwoRayGround;# radio-propagation model
set val(netif) 	Phy/WirelessPhy 	;# network interface type
set val(mac) 	Mac/802_11 		;# MAC type
set val(ifq) 	Queue/DropTail 		;# interface queue type
set val(ll) 	LL 			;# link layer type
set val(ant) 	Antenna/OmniAntenna 	;# antenna model
set val(ifqlen) 50 			;# max packet in ifq
set val(seed) 	1.0
set val(nn) 	50 			;# number of mobilenodes
set val(rp) 	DSDV 			;# routing protocol
set val(mv) 	"/home/bunder/Downloads/ns-allinone-2.35/projects/olsr/50_nodes/mv-50.tcl";# random movement generator
set val(tf) 	"/home/bunder/Downloads/ns-allinone-2.35/projects/olsr/50_nodes/tf-50.tcl";# random traffic generator
set val(x) 	1000 			;# X dimension of topography
set val(y) 	1000 			;# Y dimension of topography
set val(stop) 	180 			;# time of simulation end


#create simulator instances
set ns_ [new Simulator]

set tracefd [open traceOlsr.tr w]
set namtrace [open namOlsr.nam w]

$ns_ trace-all $tracefd
$ns_ use-newtrace
$ns_ namtrace-all-wireless $namtrace $val(x) $val(y)

# set up topography object
set topo [new Topography]

$topo load_flatgrid $val(x) $val(y)

set god_ [create-god $val(nn)]

#
# Create nn mobilenodes [$val(nn)] and attach them to the channel.
#

# configure the nodes
$ns_ node-config -adhocRouting $val(rp) \
-llType $val(ll) \
-macType $val(mac) \
-ifqType $val(ifq) \
-ifqLen $val(ifqlen) \
-antType $val(ant) \
-propType $val(prop) \
-phyType $val(netif) \
-channelType $val(chan) \
-topoInstance $topo \
-agentTrace ON \
-routerTrace ON \
-macTrace OFF \
#-movementTrace ON

for {set i 0} {$i < $val(nn) } { incr i } {
set node_($i) [$ns_ node]
}

# Provide initial location of mobilenodes
#$node_(0) set X_ 5.0
#$node_(0) set Y_ 5.0
#$node_(0) set Z_ 0.0

#$node_(1) set X_ 490.0
#$node_(1) set Y_ 285.0
#$node_(1) set Z_ 0.0

#$node_(2) set X_ 150.0
#$node_(2) set Y_ 240.0
#$node_(2) set Z_ 0.0

# Generation of movements
#$ns at 10.0 "$node_(0) setdest 250.0 250.0 3.0"
#$ns at 15.0 "$node_(1) setdest 45.0 285.0 5.0"
#$ns at 110.0 "$node_(0) setdest 480.0 300.0 5.0"

# Set a TCP connection between node_(0) and node_(1)
#set tcp [new Agent/TCP/Newreno]
#$tcp set class_ 2
#set sink [new Agent/TCPSink]
#$ns attach-agent $node_(0) $tcp
#$ns attach-agent $node_(1) $sink
#$ns connect $tcp $sink
#set ftp [new Application/FTP]
#$ftp attach-agent $tcp
#$ns at 10.0 "$ftp start"

#
# Define node movement model
#
puts "Loading connection (traffic) pattern..."
source $val(tf)

#
# Define traffic model
#
puts "Loading scenario (movement) file..."
source $val(mv)


# Define node initial position in nam
for {set i 0} {$i < $val(nn)} { incr i } {
# 30 defines the node size for nam
$ns_ initial_node_pos $node_($i) 30
}

# Telling nodes when the simulation ends
for {set i 0} {$i < $val(nn) } { incr i } {
$ns_ at $val(stop) "$node_($i) reset";
}

# ending nam and the simulation
#$ns at $val(stop) "$ns nam-end-wireless $val(stop)"
#$ns at $val(stop) "stop"
$ns_ at $val(stop).0002 "puts \"end simulation\" ; $ns_ halt"
#proc stop {} {
# global ns tracefd namtrace
# $ns flush-trace
# close $tracefd
# close $namtrace
# exec nam simwrls.nam &
#}

puts $tracefd "M 0.0 nn $val(nn) x $val(x) y $val(y) rp $val(rp)"
puts $tracefd "M 0.0 tf $val(tf) mv $val(mv) seed $val(seed)"
puts $tracefd "M 0.0 prop $val(prop) ant $val(ant)"


